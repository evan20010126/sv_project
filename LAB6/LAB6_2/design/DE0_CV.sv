
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV(
	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,


	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// LED //////////
	output		     [9:0]		LEDR,


	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW,


	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);


	
//=======================================================
//  REG/WIRE declarations
//=======================================================

	


//=======================================================
//  Structural coding
//=======================================================

	
	logic [13:0] r_LPF_threshold;
	logic [1:0]	buad_setting;
	logic reset_n;
	
	logic [7:0] data_debug		;	
	
	logic rx			;	
	logic tx			;		
	logic tx_data       ;        	
	logic tx_end_flag   ;   
	
	
	assign clk 		= CLOCK_50;
	assign reset_n 	= RESET_N;
	assign r_LPF_threshold 		= 14'd20;
	assign buad_setting			=2'b10;

	assign rx			= GPIO_0[2];
	assign GPIO_0[4]	= tx;

	
// 	rs232 rs232_1(
// 		.clk					(clk					), 
// 		.rst               		(~reset_n               ),
// 		.r_LPF_threshold		(r_LPF_threshold		),
// 		.buad_setting			(buad_setting			),
// 		.rx						(rx						),
// 		.tx						(tx						),
// 		.data_debug				(data_debug				)
// 		//.tx_data               	(tx_data               	),
// 	//	.tx_end_flag           	(tx_end_flag   			)        	
// );
logic rx_finish;
bit_trans bit_trans_1(
		.clk					(clk					), 
		.rst               		(~reset_n               ),
		.r_LPF_threshold		(r_LPF_threshold		),
		// .buad_setting			(buad_setting			),
		.rx						(rx						),
		.tx						(tx						),
		.rx_finish				(rx_finish),
		.shift_register			(data_debug)
);
	
	
	assign LEDR[7:0] = data_debug;


endmodule
	