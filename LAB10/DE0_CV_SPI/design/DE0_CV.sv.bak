
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV(
	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,


	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// LED //////////
	output		     [9:0]		LEDR,


	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW,


	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);


	
//=======================================================
//  REG/WIRE declarations
//=======================================================

	


//=======================================================
//  Structural coding
//=======================================================

	
	logic [13:0] r_LPF_threshold;
	logic [1:0]	buad_setting;
	logic reset_n;
	
	logic [7:0] data_debug		;	
	
	logic rx			;	
	logic tx			;		
	logic tx_data       ;        	
	logic tx_end_flag   ;   
	
	
	assign clk 		= CLOCK_50;
	assign reset_n 	= RESET_N;
	//assign enc 		= SW[0];
	assign r_LPF_threshold 		= 14'd20;
	assign buad_setting			=2'b00;

	assign rx			= GPIO_0[2];
	assign GPIO_0[4]	= tx;

	
	rs232 rs232_1(
		.clk					(clk					), 
		.rst               		(~reset_n               ),
		.r_LPF_threshold		(r_LPF_threshold		),
		.buad_setting			(buad_setting			),
		.rx						(rx						),
		.tx						(tx						),
		.data_debug				(data_debug				)
		//.tx_data               	(tx_data               	),
	//	.tx_end_flag           	(tx_end_flag   			)        	
);
	
	
	assign LEDR[7:0] = data_debug;


endmodule
	
	/* encoder_system ens_sys(
		.clk					(clk					), 
		.reset_n                (reset_n                ),
		.r_LPF_threshold		(r_LPF_threshold		),
		.r_distance				(r_distance				),
		.enc					(enc					),
		.step_col				(step_col				)
	);	
	 */


/*
	
	Low_Pass_Filter_4ENC Low_Pass_Filter_4ENC_1(
		.sig_filter				(enc_filter				),	
		.signal					(enc					),	
		.r_LPF_threshold_enc	(14'd200				),  //	Unit : 0.08us  /// 2^3 = 8,  r_LPF_threshold_enc=0 => By Pass
		.clk					(clk					), 
		.reset                  (reset_n                )
	);
	
	// posedege of encoder
	always_ff @(posedge clk)
		if (~reset_n) begin
			s_signal <= 1'b1;
			d_signal <= 1'b1;
			enc_pos 	<= 1'b0;
		
		end
		else begin
			{d_signal, s_signal} <= {s_signal, enc_filter};	
			enc_pos <= s_signal &  ~d_signal;
		end

	encoder_measurement enc_measure(
	.clk		(clk		), //clk_50M
	.reset_n	(reset_n	), //為0時重置系統
	.enc_pos	(enc_pos		), //encoder
	.cnt_meas	(cnt_meas	)
	);	            
		
	
	*/
	/*  Handshaking hs(
		.clk	(CLOCK_50	), //clk_50M
		.rst	(RESET_N	), //為0時重置系統
		.c1		(c1			),
		.c2		(c2			)
	); */
	
	

/* 
counter	counter1(
		.clk	(CLOCK_50),
		.up		(SW[0]),
		.down	(SW[1]),
		.reset	(KEY[0]),
		.q      (LEDR[3:0])
	);
 */
/*

encoder_8to3 d83(
	.a		(SW[7:0]),
	.y		(LEDR[2:0])
);



latch_1bit latch_1(
	.d		(SW[0]),
	.clk	(CLOCK_50),
	.y		(LEDR[0])
);*/
//endmodule
