--scfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALMOST_EMPTY_VALUE=50 DEVICE_FAMILY="Cyclone V" LPM_NUMWORDS=2048 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTHU=11 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" almost_empty clock data empty full q rdreq sclr usedw wrreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone V" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 19.1 cbx_altdpram 2019:09:22:11:00:28:SJ cbx_altera_counter 2019:09:22:11:00:28:SJ cbx_altera_syncram 2019:09:22:11:00:28:SJ cbx_altera_syncram_nd_impl 2019:09:22:11:00:28:SJ cbx_altsyncram 2019:09:22:11:00:28:SJ cbx_cycloneii 2019:09:22:11:00:28:SJ cbx_fifo_common 2019:09:22:11:00:27:SJ cbx_lpm_add_sub 2019:09:22:11:00:28:SJ cbx_lpm_compare 2019:09:22:11:00:28:SJ cbx_lpm_counter 2019:09:22:11:00:28:SJ cbx_lpm_decode 2019:09:22:11:00:28:SJ cbx_lpm_mux 2019:09:22:11:00:28:SJ cbx_mgl 2019:09:22:11:02:15:SJ cbx_nadder 2019:09:22:11:00:28:SJ cbx_scfifo 2019:09:22:11:00:28:SJ cbx_stratix 2019:09:22:11:00:28:SJ cbx_stratixii 2019:09:22:11:00:28:SJ cbx_stratixiii 2019:09:22:11:00:28:SJ cbx_stratixv 2019:09:22:11:00:28:SJ cbx_util_mgl 2019:09:22:11:00:28:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_dpfifo_00a1 (clock, data[15..0], rreq, sclr, wreq)
RETURNS ( empty, full, q[15..0], usedw[10..0]);

--synthesis_resources = lut 33 M10K 4 reg 36 
SUBDESIGN scfifo_7ld1
( 
	almost_empty	:	output;
	clock	:	input;
	data[15..0]	:	input;
	empty	:	output;
	full	:	output;
	q[15..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	usedw[10..0]	:	output;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_00a1;
	dffe_nae : dffe;
	comparison_ae0	: WIRE;
	comparison_ae1	: WIRE;
	comparison_ae10	: WIRE;
	comparison_ae2	: WIRE;
	comparison_ae3	: WIRE;
	comparison_ae4	: WIRE;
	comparison_ae5	: WIRE;
	comparison_ae6	: WIRE;
	comparison_ae7	: WIRE;
	comparison_ae8	: WIRE;
	comparison_ae9	: WIRE;
	comparison_pre_ae0	: WIRE;
	comparison_pre_ae1	: WIRE;
	comparison_pre_ae10	: WIRE;
	comparison_pre_ae2	: WIRE;
	comparison_pre_ae3	: WIRE;
	comparison_pre_ae4	: WIRE;
	comparison_pre_ae5	: WIRE;
	comparison_pre_ae6	: WIRE;
	comparison_pre_ae7	: WIRE;
	comparison_pre_ae8	: WIRE;
	comparison_pre_ae9	: WIRE;
	wire_ae[10..0]	: WIRE;
	wire_pre_ae[10..0]	: WIRE;

BEGIN 
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_nae.clk = clock;
	dffe_nae.d = ((dffe_nae.q & (dffe_nae.q $ (sclr # ((comparison_ae10 & (! wrreq)) & rdreq)))) # ((! dffe_nae.q) & ((((! sclr) & comparison_pre_ae10) & wrreq) & (! rdreq))));
	almost_empty = (! dffe_nae.q);
	comparison_ae0 = (dpfifo.usedw[0..0] $ wire_ae[0..0]);
	comparison_ae1 = ((dpfifo.usedw[1..1] $ wire_ae[1..1]) & comparison_ae0);
	comparison_ae10 = ((dpfifo.usedw[10..10] $ wire_ae[10..10]) & comparison_ae9);
	comparison_ae2 = ((dpfifo.usedw[2..2] $ wire_ae[2..2]) & comparison_ae1);
	comparison_ae3 = ((dpfifo.usedw[3..3] $ wire_ae[3..3]) & comparison_ae2);
	comparison_ae4 = ((dpfifo.usedw[4..4] $ wire_ae[4..4]) & comparison_ae3);
	comparison_ae5 = ((dpfifo.usedw[5..5] $ wire_ae[5..5]) & comparison_ae4);
	comparison_ae6 = ((dpfifo.usedw[6..6] $ wire_ae[6..6]) & comparison_ae5);
	comparison_ae7 = ((dpfifo.usedw[7..7] $ wire_ae[7..7]) & comparison_ae6);
	comparison_ae8 = ((dpfifo.usedw[8..8] $ wire_ae[8..8]) & comparison_ae7);
	comparison_ae9 = ((dpfifo.usedw[9..9] $ wire_ae[9..9]) & comparison_ae8);
	comparison_pre_ae0 = (dpfifo.usedw[0..0] $ wire_pre_ae[0..0]);
	comparison_pre_ae1 = ((dpfifo.usedw[1..1] $ wire_pre_ae[1..1]) & comparison_pre_ae0);
	comparison_pre_ae10 = ((dpfifo.usedw[10..10] $ wire_pre_ae[10..10]) & comparison_pre_ae9);
	comparison_pre_ae2 = ((dpfifo.usedw[2..2] $ wire_pre_ae[2..2]) & comparison_pre_ae1);
	comparison_pre_ae3 = ((dpfifo.usedw[3..3] $ wire_pre_ae[3..3]) & comparison_pre_ae2);
	comparison_pre_ae4 = ((dpfifo.usedw[4..4] $ wire_pre_ae[4..4]) & comparison_pre_ae3);
	comparison_pre_ae5 = ((dpfifo.usedw[5..5] $ wire_pre_ae[5..5]) & comparison_pre_ae4);
	comparison_pre_ae6 = ((dpfifo.usedw[6..6] $ wire_pre_ae[6..6]) & comparison_pre_ae5);
	comparison_pre_ae7 = ((dpfifo.usedw[7..7] $ wire_pre_ae[7..7]) & comparison_pre_ae6);
	comparison_pre_ae8 = ((dpfifo.usedw[8..8] $ wire_pre_ae[8..8]) & comparison_pre_ae7);
	comparison_pre_ae9 = ((dpfifo.usedw[9..9] $ wire_pre_ae[9..9]) & comparison_pre_ae8);
	empty = dpfifo.empty;
	full = dpfifo.full;
	q[] = dpfifo.q[];
	usedw[] = dpfifo.usedw[];
	wire_ae[] = ( B"1", B"1", B"1", B"1", B"1", B"0", B"0", B"1", B"1", B"0", B"1");
	wire_pre_ae[] = ( B"1", B"1", B"1", B"1", B"1", B"0", B"0", B"1", B"1", B"1", B"0");
END;
--VALID FILE
